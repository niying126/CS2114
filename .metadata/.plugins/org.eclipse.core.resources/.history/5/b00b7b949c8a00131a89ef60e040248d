package cs2114.minesweeper;
import sofia.util.Random;
// -------------------------------------------------------------------------
/**
 *  A program of sweeper mine board
 *  The subclass of MineSweeperBoardBase that it declares how to initialize the 
 *  board and how the board works
 * 
 *  @author niy1987
 *  @version Jan 31, 2014
 */
public class MineSweeperBoard extends MineSweeperBoardBase
{
    private int col;
    private int row;
    private int num;
    private static Random r;
    private MineSweeperCell[][] m;
    // ----------------------------------------------------------
    /**
     * Create a new MineSweeperBoard object.
     * @param w the number of column of the board
     * @param h the number of rows of the board
     * @param n the number of mines in the board
     */
    public MineSweeperBoard(int w, int h, int n)
    {
        col = w;
        row = h;
        num = n;
        int count = 0;
        m = new MineSweeperCell[row][col];
        while (count <= num)
        {
            r = new Random(row);
            int i = r.nextInt();
            int j = new Random(col).nextInt();
            if (getCell(i, j) != MineSweeperCell.MINE)
            {
                setCell(i, j, MineSweeperCell.COVERED_CELL);
            }
            else
            {
                setCell(i, j, MineSweeperCell.MINE);
                count++;
            }  
        }
    }
    /**
     * Place or remove a flag from the specified cell.
     * @param x the x coordinate
     * @param y the y coordinate
     */
    public void flagCell(int x, int y)
    {
        if (getCell(x, y) == MineSweeperCell.COVERED_CELL)
        {
            setCell(x, y, MineSweeperCell.FLAG);
        }
        else if (getCell(x, y) == MineSweeperCell.MINE)
        {
            setCell(x, y, MineSweeperCell.FLAGGED_MINE);
        }
        else if (getCell(x, y) == MineSweeperCell.FLAG || getCell(x, y) == MineSweeperCell.FLAGGED_MINE)
        {
            setCell(x, y, MineSweeperCell.COVERED_CELL);
        }
    }
    /**
     * Get the contents of the specified cell on this MineSweeperBoard.
     * @param x the x coordinate
     * @param y the y coordinate
     * @return the contents of the specified cell
     */
    public MineSweeperCell getCell(int x, int y)
    {
        if (!(x < row && x >= 0) || !(y < col && y >= 0))
        {
            return MineSweeperCell.INVALID_CELL;
        }
        else
        {
            return m[x][y];
        }
    }
    /**
     * Get the number of rows in this MineSweeperBoard.
     * @return the rows of the board
     */
    public int height()
    {
        return row;
    }
    /**
     * Determine if the player has lost the current game.
     * @return the game is lost or not
     */
    public boolean isGameLost()
    {
        boolean found = false;
        int j = 0;
        for (int i = 0; i < row; i++)
        {
            while (!found && j < col)
            {
                if (getCell(i, j) != MineSweeperCell.UNCOVERED_MINE)
                {
                    j++;
                }
                else
                {
                    found = true;
                }
            }
        }
        return found;
    }
    /**
     * Determine if the player has won the current game.
     * @return if the game is won or not
     */
    public boolean isGameWon()
    {
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                if (getCell(i, j) == MineSweeperCell.FLAG || getCell(i, j) != 
                    MineSweeperCell.COVERED_CELL)
                {
                    return false;
                }
            }
        }
        return true;
    }
    /**
     * Count the number of mines that appear in cells that are adjacent to the 
     * specified cell.
     * @param x the x coordinate
     * @param y the y coordinate
     */
    public int numberOfAdjacentMines(int x, int y)
    {
        int count = 0;
        for (int i = x - 1; i < x + 2; i++)
        {
            for (int j = y - 1; j < y + 2; j++)
            {
                if (i > 0 && j > 0 && i < row - 1 && j < col - 1 && i != x 
                    && j != y)
                {
                    if (getCell(i, j) == MineSweeperCell.MINE)
                    {
                        count++;
                    }
                }

            }
        }
        return count;
    }
    /**
     * Uncover all of the cells on the board.
     */
    public void revealBoard()
    {
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < col; j++)
            {
                uncoverCell(i, j);
            }
        }
    }
    /**
     * Uncover the specified cell.
     */
    public void uncoverCell(int x, int y)
    {
        if (getCell(x, y) == MineSweeperCell.MINE)
        {
            setCell(x, y, MineSweeperCell.UNCOVERED_MINE);
        }
        else if (getCell(x, y) == MineSweeperCell.COVERED_CELL)
        {
            setCell(x, y, MineSweeperCell.adjacentTo(numberOfAdjacentMines(x, y)));
        }
    }
    /**
     * Get the number of columns in this MineSweeperBoard.
     * @return the number of columns
     */
    public int width()
    {
        return col;
    }
    /**
     * Set the contents of the specified cell on this MineSweeperBoard.
     */
    protected void setCell(int x, int y, MineSweeperCell value)
    {
        m[x][y] = value;
    }
}
